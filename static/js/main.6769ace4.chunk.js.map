{"version":3,"sources":["Loginbyfacebook.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Logintbyfacebook","props","state","res","responseFacebook","Name","name","email","token","accessToken","Image","picture","data","url","ProviderId","sessionStorage","setItem","JSON","stringify","this","history","push","className","style","buttonStyle","padding","appId","process","autoLoad","version","fields","callback","response","console","log","signup","Component","Dashboard","useState","parse","getItem","React","hasMore","nextPage","first","posts","setPosts","searchTopic","setSearchTopic","countRef","useRef","anchorEl","setAnchorEl","handlePopClose","open","Boolean","id","undefined","useEffect","current","window","FB","api","addPosts","useStyles","makeStyles","theme","root","flexGrow","overflow","background","paper","maxWidth","margin","spacing","textField","marginLeft","typography","form","cftd","backgroundColor","height","width","color","iconButton","outerColumn","borderRight","borderBottom","borderLeft","centerColumn","length","postsCopy","Object","assign","regexCftd","RegExp","regexTopic","selectCount","forEach","dta","index","array","cftdPost","test","message","aPost","from","updated_time","comments","reactions","link","substr","full_picture","solve","localStorage","ans","anno","solved","dtc","cPost","created_time","comment_count","like_count","selectPost","paging","next","classes","Paper","Grid","container","wrap","item","Avatar","src","xs","Typography","align","variant","TextField","label","defaultValue","size","value","onChange","e","target","IconButton","onClick","dataLength","loader","endMessage","textAlign","map","split","n","i","a","join","Link","href","rel","direction","alignItems","justify","Chip","alt","gutterBottom","borderTop","display","img","justifyContents","noValidate","autoComplete","fullWidth","disableUnderline","borderRadius","InputProps","fullwidth","multiline","maxRows","idx","key","val","jsonObj","handleAnsChange","justifyContent","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","App","Fragment","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA2DeA,EAzDf,kDACQ,WAAYC,GAAQ,IAAD,8BACX,cAAMA,IACDC,MAAQ,GAFF,EAD3B,0CAQQ,SAAOC,GACL,IAAMC,EAAmB,CACvBC,KAAMF,EAAIG,KACVC,MAAOJ,EAAII,MACXC,MAAOL,EAAIM,YACXC,MAAOP,EAAIQ,QAAQC,KAAKC,IACxBC,WAAY,YAIdC,eAAeC,QAAQ,WAAYC,KAAKC,UAAUd,IAClDe,KAAKlB,MAAMmB,QAAQC,KAAK,gBAnBlC,oBAsBQ,WAAU,IAAD,OASL,OACQ,qBAAKC,UAAU,MAAf,SAMA,qBAAKA,UAAU,MAAf,SACE,sBAAKC,MAAO,CAAE,WAAc,QAAUD,UAAU,YAAhD,UACE,qBAAKA,UAAU,aACf,qBAAKA,UAAU,WAAf,SACA,cAAC,IAAD,CAAeE,YAAa,CAACC,QAAQ,OACnCC,MApBQC,kBAqBRC,UAAU,EACVC,QAAQ,OACRC,OAAO,qBACPC,SAvBW,SAACC,GAClBC,QAAQC,IAAIF,GAIZ,EAAKG,OAAOH,QAoBR,qBAAKV,UAAU,wBAjDvC,GAAsCc,a,4JCievBC,MAhdf,WACE,MAAwBC,oBAAS,WAC/B,OAAOrB,KAAKsB,MAAMxB,eAAeyB,QAAQ,gBAD3C,mBAAOlC,EAAP,KAIA,GAJA,KAI0BmC,IAAMH,SAAS,CACjB1B,KAAM,GACN8B,SAAS,EACTC,SAAU,QACVC,OAAO,KAJ/B,mBAAOC,EAAP,KAAcC,EAAd,KAMA,EAAsCL,IAAMH,SAAS,IAArD,mBAAOS,EAAP,KAAoBC,EAApB,KAEMC,EAAWC,iBAAO,GAGxB,EAAgCT,IAAMH,SAAS,MAA/C,mBAAOa,EAAP,KAAiBC,EAAjB,KAIMC,EAAiB,WACrBD,EAAY,OAERE,EAAOC,QAAQJ,GACfK,EAAKF,EAAO,sBAAmBG,EAGrCC,qBAAU,WAGR,GAFAT,EAASU,UACT1B,QAAQC,IAAR,uBAA4Be,EAASU,UACjCd,EAAMD,MAAO,CAEfgB,OAAOC,GAAGC,IAAI,wBACZ,MACA,CAAE,OAAU,iJACVC,OAKR,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,SAAU,SACVC,WAAY,oDAEdC,MAAO,CACLC,SAAU,IACVC,OAAO,GAAD,OAAKP,EAAMQ,QAAQ,GAAnB,WACNjD,QAASyC,EAAMQ,QAAQ,IAEzBC,UAAW,CACTC,WAAYV,EAAMQ,QAAQ,IAE5BG,WAAY,CACVpD,QAASyC,EAAMQ,QAAQ,IAEzBI,KAAM,CACJrD,QAASyC,EAAMQ,QAAQ,EAAG,IAE5BK,KAAM,CACJC,gBAAiB,UACjBC,OAAQ,OACRC,MAAO,OACPC,MAAO,WAETC,WAAY,CACV3D,QAAS,IAEX4D,YAAa,CACXC,YAAa,iBACbC,aAAc,iBACdC,WAAY,kBAEdC,aAAc,CACZb,WAAYV,EAAMQ,QAAQ,QAKxBX,EAAW,SAAC/B,GAIhB,GAHAC,QAAQC,IAAIF,GAGiB,IAAzBA,EAASpB,KAAK8E,OAAc,CAC9B,IAAIC,EAAYC,OAAOC,OAAO,GAAIhD,GAGlC,OAFA8C,EAAUjD,SAAU,OACpBI,EAAS6C,GAGX,IAAMG,EAAY,IAAIC,OAAO,UACvBC,EAAa,IAAID,OAAOhD,EAAa,KACvCkD,EAAc,EACdN,EAAYC,OAAOC,OAAO,GAAIhD,GAElCb,EAASpB,KAAKsF,SAAQ,SAACC,EAAKC,EAAOC,GAEjC,IAAIC,EAAWR,EAAUS,KAAKJ,EAAIK,SAC9BC,EAAQ,CACVC,KAAMP,EAAIO,KAAOP,EAAIO,KAAO,CAAEpG,KAAM,UAAWkD,GAAI,oBACnDA,GAAI2C,EAAI3C,GACRgD,QAASL,EAAIK,QACbG,aAAcR,EAAIQ,aAClBC,SAAUT,EAAIS,SAAWT,EAAIS,SAAShG,KAAK8E,OAAS,EACpDmB,UAAWV,EAAIU,UAAYV,EAAIU,UAAUjG,KAAK8E,OAAS,EACvDoB,KAAM,kDAAoDX,EAAI3C,GAAGuD,OAAO,IAAM,IAC9EC,aAAcb,EAAIa,aAAeb,EAAIa,aAAe,GACpDjC,KAAMuB,EAENW,MAAOC,aAAa1E,QAAQ2D,EAAI3C,IAAMvC,KAAKsB,MAAM2E,aAAa1E,QAAQ2D,EAAI3C,KACtE,CAAE2D,IAAK,GAAIC,KAAM,GAAIC,QAAQ,IAOnC,GAAoB,KAAhBtE,EACFd,QAAQC,IAAR,mBAAwB+D,MACxBN,EAAU/E,KAAKS,KAAKoF,GAEhBH,GAAaG,EAAMG,SAAW,GAChCT,EAAIS,SAAShG,KAAKsF,SAAQ,SAAUoB,EAAKlB,EAAOC,GAC9C,IAAIkB,EAAQ,CACVb,KAAMY,EAAIZ,KAAOY,EAAIZ,KAAO,CAAEpG,KAAM,UAAWkD,GAAI,oBACnDA,GAAI8D,EAAI9D,GACRgD,QAASc,EAAId,QACbG,aAAcW,EAAIE,aAClBZ,SAAUU,EAAIG,cACZZ,UAAWS,EAAII,WACjBZ,KAAM,kDAAoDX,EAAI3C,GAAGuD,OAAO,IAAM,IAC9EhC,MAAM,EACNkC,MAAOC,aAAa1E,QAAQ8E,EAAI9D,IAAMvC,KAAKsB,MAAM2E,aAAa1E,QAAQ8E,EAAI9D,KACtE,CAAE2D,IAAK,GAAIC,KAAM,GAAIC,QAAQ,IAEnCpF,QAAQC,IAAR,mBAAwB+D,MACxBN,EAAU/E,KAAKS,KAAKkG,UAGnB,CACL,IAAII,EAAa3B,EAAWO,KAAKE,EAAMD,UAAYR,EAAWO,KAAKE,EAAMC,KAAKpG,MAC1EgG,EAAWR,EAAUS,KAAKJ,EAAIK,SAC9BmB,GACF1F,QAAQC,IAAR,mBAAwB+D,MACxBN,EAAU/E,KAAKS,KAAKoF,IAEhBA,EAAMG,SAAW,GACnBT,EAAIS,SAAShG,KAAKsF,SAAQ,SAAUoB,EAAKlB,EAAOC,GAC9C,IAAIkB,EAAQ,CACVb,KAAMY,EAAIZ,KAAOY,EAAIZ,KAAO,CAAEpG,KAAM,UAAWkD,GAAI,oBACnDA,GAAI8D,EAAI9D,GACRgD,QAASc,EAAId,QACbG,aAAcW,EAAIE,aAClBZ,SAAUU,EAAIG,cACdZ,UAAWS,EAAII,WACfZ,KAAM,kDAAoDX,EAAI3C,GAAGuD,OAAO,IAAM,IAC9EhC,KAAMuB,EACNW,MAAOC,aAAa1E,QAAQ8E,EAAI9D,IAAMvC,KAAKsB,MAAM2E,aAAa1E,QAAQ8E,EAAI9D,KACtE,CAAE2D,IAAK,GAAIC,KAAM,GAAIC,QAAQ,KAEfrB,EAAWO,KAAKgB,EAAMf,UAAYR,EAAWO,KAAKgB,EAAMb,KAAKpG,SAE/E2B,QAAQC,IAAR,mBAAwB+D,MACxBN,EAAU/E,KAAKS,KAAKoF,GACpBd,EAAU/E,KAAKS,KAAKkG,WAYhC5B,EAAU/C,OAAQ,EAClB+C,EAAUjD,QAAoC,IAAzBV,EAASpB,KAAK8E,OACnCC,EAAUhD,SAAWX,EAAS4F,OAAS5F,EAAS4F,OAAOC,KAAKd,OAAO,IAAM,GACzEjE,EAAS6C,IA4ELmC,EAAU9D,IAEhB,OAEE,sBAAK1C,UAAWwG,EAAQ3D,KAAxB,UACE,cAAC4D,EAAA,EAAD,CAAOzG,UAAWwG,EAAQvD,MAA1B,SACE,eAACyD,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,SAASxD,QAAS,EAAvC,UACE,cAACsD,EAAA,EAAD,CAAMG,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAQC,IAAK/H,EAAKI,UAEpB,cAACsH,EAAA,EAAD,CAAMG,MAAI,EAACG,IAAE,EAAb,SACE,eAACC,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,YAAjC,qBAAsDnI,EAAKD,UAE7D,eAAC2H,EAAA,EAAD,CAAMG,MAAI,EAAV,UACA,cAACO,EAAA,EAAD,CAAWC,MAAM,eACjBnF,GAAG,sBACHoF,aAAa,eACbH,QAAQ,WACRI,KAAK,QACHC,MAAO/F,EAAagG,SArEJ,SAACC,GACzBhG,EAAegG,EAAEC,OAAOH,OACxB7G,QAAQC,IAAIa,MAoEL,cAACmG,EAAA,EAAD,CAAaC,QAjEM,SAACH,GAC3BlG,EAAS,CACPlC,KAAM,GACN8B,SAAS,EACTC,SAAU,QACVC,OAAO,KA4DF,SACI,cAAC,IAAD,CAAYrB,MAAO,CAAC4D,MAAO,8BAMpC,8BACE,cAAC,IAAD,CACEiE,WAAYvG,EAAMjC,KAAK8E,OACvBmC,KArGc,WACpB5F,QAAQC,IAAI,oBACRW,EAAMH,SACRkB,OAAOC,GAAGC,IAAIjB,EAAMF,SAAUoB,IAmG1BrB,QAASG,EAAMH,QACf2G,OAAQ,4CACRC,WACE,mBAAG/H,MAAO,CAAEgI,UAAW,UAAvB,SACE,2DAPN,SAWG1G,EAAMjC,KAAK4I,KAAI,SAACrD,EAAKC,GAAN,OACd,eAAC2B,EAAA,EAAD,CAAOzG,UAAWwG,EAAQvD,MAA1B,UACA,eAACyD,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,SAASxD,QAAS,EAAvC,UACE,cAACsD,EAAA,EAAD,CAAMG,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,UAASjC,EAAIO,KAAKpG,KAAKmJ,MAAM,KAAKD,KAAI,SAACE,EAAEC,EAAEC,GAAL,OAAiB,IAAND,GAAWA,EAAE,IAAMC,EAAElE,OAASgE,EAAE,GAAK,QAAMG,KAAK,QAInG,eAAC7B,EAAA,EAAD,CAAMG,MAAI,EAACG,GAAI,GAAf,UACE,cAACC,EAAA,EAAD,CAAYC,MAAM,OAAlB,SAA0BrC,EAAIO,KAAKpG,OACnC,cAACiI,EAAA,EAAD,CAAYC,MAAM,OAAlB,SAEE,cAACsB,EAAA,EAAD,CAAMC,KAAM5D,EAAIW,KAAMmC,OAAO,SAASe,IAAI,sBAAsBvB,QAAQ,QAAxE,SACGtC,EAAIQ,oBAKX,cAACqB,EAAA,EAAD,CACEG,MAAI,EACJF,WAAS,EACTgC,UAAU,SACVC,WAAW,WACXC,QAAQ,aALV,SAOGhE,EAAIpB,MACL,cAACqF,EAAA,EAAD,CAAMvB,KAAK,QAAQF,MAAM,OAAOpH,MAAO,CAAC+C,WAAY,iBAAkBa,MAAM,gBAKhF,cAAC6C,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,SAASxD,QAAS,EAAvC,SACE,cAACsD,EAAA,EAAD,CAAMG,MAAI,EAACG,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CAAYC,MAAM,OAAlB,SAA0BrC,EAAIK,cAIjCL,EAAIa,cACL,sBAAMmB,MAAI,EAAV,SACE,qBAAKjD,MAAM,MAAMD,OAAO,MAAMoF,IAAI,MAAMhC,IAAKlC,EAAIa,iBAKnD,eAACgB,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,SAASxD,QAAS,EAAvC,UACE,cAACsD,EAAA,EAAD,CAAMG,MAAI,EAACG,IAAE,EAAb,SACE,eAACC,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,QAAjC,mBAAgDtC,EAAIU,eAGtD,cAACmB,EAAA,EAAD,CAAMG,MAAI,EAACG,IAAE,EAAb,SACE,eAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,QAAQ6B,aAAa,OAAvD,sBACYnE,EAAIS,iBAKpB,eAACoB,EAAA,EAAD,CAAMC,WAAS,EAACvD,QAAS,EAAGnD,MAAO,CAAEgJ,UAAW,kBAAhD,UACE,cAACvC,EAAA,EAAD,CAAMC,WAAS,EAACgC,UAAU,SAAS9B,MAAI,EAACG,GAAI,EAA5C,SACE,cAACN,EAAA,EAAD,CACEG,MAAI,EACJG,IAAE,EAEF/G,MAAO,CAAEiJ,QAAS,OAAQN,WAAY,UAJxC,SAME,cAAC9B,EAAA,EAAD,CAAQ9G,UAAWwG,EAAQ2C,IAAKpC,IAAK/H,EAAKI,YAI9C,cAACsH,EAAA,EAAD,CACEC,WAAS,EACTgC,UAAU,SACV9B,MAAI,EACJG,GAAI,EAEJ4B,WAAW,aACXQ,gBAAgB,aAPlB,SASG,cAAC1C,EAAA,EAAD,CAAMG,MAAI,EAACgC,QAAQ,OAAnB,SAED,sBAAM7I,UAAWwG,EAAQhD,KAAM6F,YAAU,EAACC,aAAa,MAAvD,SACD,cAAClC,EAAA,EAAD,CAAWmC,WAAS,EACpBtJ,MAAO,CACNuJ,kBAAkB,EAClBxG,WAAY,mDACZyG,aAAc,sBACdtJ,QAAS,UAIVuJ,WAAY,CACXF,kBAAkB,GAElBxJ,UAAWwG,EAAQnD,UAClBgE,MAAM,SACNsC,WAAS,EACTC,WAAS,EACTC,QAAS,EACTrC,MAAOjG,EAAMjC,KAAKwF,GAAOa,MAAME,IAC/B4B,SAAU,SAACC,GAAD,OAxMD,SAACoC,EAAKC,EAAKC,GAEjC,IAAKzI,EAAMjC,KAAKwK,GAAKnE,MAAMI,OAAO,CAChC,IAAI1B,EAAYC,OAAOC,OAAO,GAAIhD,GAClC8C,EAAU/E,KAAKwK,GAAKnE,MAAMoE,GAAOC,EAEjC,IAAMC,EAAUtK,KAAKC,UAAUyE,EAAU/E,KAAKwK,GAAKnE,OACnDC,aAAalG,QAAQ2E,EAAU/E,KAAKwK,GAAK5H,GAAI+H,GAE7CzI,EAAS6C,IA+LmB6F,CAAgBpF,EAAO,MAAQ4C,EAAEC,OAAOH,gBAkB5D,cAACd,EAAA,EAAD,CACEC,WAAS,EACTgC,UAAU,SACV9B,MAAI,EACJG,GAAI,EACJ/G,MAAO,CACLiJ,QAAS,OACTN,WAAY,SACZuB,eAAgB,UARpB,SAWE,eAACzD,EAAA,EAAD,CAAMG,MAAI,EAAV,UACGhC,EAAIc,MAAMI,OACT,cAAC6B,EAAA,EAAD,UACA,cAAC,IAAD,CAAU3H,MAAO,CAAC4D,MAAO,sBAG3B,cAAC+D,EAAA,EAAD,CAAaC,QAAS,SAACH,GAAD,OAhNlBoC,EAgNoChF,EAhN/BsF,EAgNsC1C,OA/MzDnG,EAAMjC,KAAKwK,GAAKnE,MAAME,KACxB/D,EAAYsI,EAAMC,gBAFH,IAACP,EAAKM,GAgNT,SACE,cAAC,IAAD,CAAUnK,MAAO,CAAC4D,MAAO,sBAG3B,cAACyG,EAAA,EAAD,CACApI,GAAIA,EACJF,KAAMA,EACNH,SAAUA,EACV0I,QAASxI,EACTyI,aAAc,CACZC,SAAU,MACVC,WAAY,QAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAXd,SAcA,eAACzD,EAAA,EAAD,CAAYjH,UAAWwG,EAAQjD,WAA/B,yDAC8C,uBAD9C,2F,gBC1bHqH,MAjBf,WACE,OACE,cAAC,IAAMC,SAAP,UACD,qBAAK7K,UAAU,MAAf,SACE,cAAC,IAAD,CAAQ8K,SAAS,aAAjB,SACC,qBAAK9K,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+K,OAAK,EAACC,KAAK,IAAIC,UAAWvM,IACjC,cAAC,IAAD,CAAOsM,KAAK,aAAaC,UAAWlK,gBCD/BmK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6769ace4.chunk.js","sourcesContent":["import React, { Component } from 'react'  \r\nimport FacebookLogin from 'react-facebook-login';  \r\nexport class Logintbyfacebook extends Component {  \r\n        constructor(props) {  \r\n                super(props);  \r\n                this.state = {  \r\n              \r\n                };  \r\n        }  \r\n        \r\n        signup(res) {  \r\n          const responseFacebook = {  \r\n            Name: res.name,  \r\n            email: res.email,  \r\n            token: res.accessToken,  \r\n            Image: res.picture.data.url,  \r\n            ProviderId: 'Facebook'  \r\n        \r\n          }  \r\n          \r\n          sessionStorage.setItem(\"userData\", JSON.stringify(responseFacebook));  \r\n          this.props.history.push('/Dashboard')\r\n\r\n        };  \r\n        render() {  \r\n            const facebookAppId = process.env.REACT_APP_FACEBOOK_APP_ID;\r\n            const responseFacebook = (response) => {  \r\n                    console.log(response);  \r\n                 /*    var res = response.profileObj;  \r\n                    console.log(res);  */ \r\n                    debugger;  \r\n                    this.signup(response);  \r\n                  }  \r\n            return (  \r\n                    <div className=\"App\">  \r\n                    {/* <div className=\"row\">  \r\n                      <div className=\"col-sm-12 btn btn-info\">  \r\n                        Login With Facebook Using ReactJS  \r\n                        </div>  \r\n                    </div>   */}\r\n                    <div className=\"row\">  \r\n                      <div style={{ 'paddingTop': \"20px\" }} className=\"col-sm-12\">  \r\n                        <div className=\"col-sm-4\"></div>  \r\n                        <div className=\"col-sm-4\">  \r\n                        <FacebookLogin buttonStyle={{padding:\"6px\"}}  \r\n                          appId={facebookAppId}  \r\n                          autoLoad={true}\r\n                          version=\"10.0\" \r\n                          fields=\"name,email,picture\"  \r\n                          callback={responseFacebook}/>  \r\n                        </div>  \r\n                        <div className=\"col-sm-4\"></div>  \r\n                      </div>  \r\n                    </div>  \r\n                  </div>  \r\n            )  \r\n        }  \r\n}  \r\n  \r\nexport default Logintbyfacebook","import React, { useEffect, useState, useRef } from 'react'\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  Paper,\r\n  makeStyles,\r\n  Grid,\r\n  Avatar,\r\n  Typography,\r\n  TextField,\r\n  Link,\r\n  Chip,\r\n  IconButton,\r\n  Popover\r\n} from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n// the main page with most of the logic\r\nfunction Dashboard() {\r\n  const [name, setName] = useState(() => {\r\n    return JSON.parse(sessionStorage.getItem('userData'));\r\n  });\r\n// 2 state variables\r\n  const [posts, setPosts] = React.useState({\r\n                          data: [],\r\n                          hasMore: true,\r\n                          nextPage: \"first\",\r\n                          first: true\r\n                          });\r\n  const [searchTopic, setSearchTopic] = React.useState(\"\");\r\n // useRef is a special state variable but doesn't cause re-render on update \r\n  const countRef = useRef(0);\r\n \r\n  // for popover handle\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  /* const handlePopClick = (event) => {  //see handlPost\r\n    setAnchorEl(event.currentTarget);\r\n  }; */\r\n  const handlePopClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n// end popHanlde\r\n\r\n  useEffect(() => {\r\n    countRef.current++;\r\n    console.log(`in useEffect ${countRef.current}`);\r\n    if (posts.first) {\r\n      const facebookGroupId = process.env.REACT_APP_FACEBOOK_GROUP_ID;\r\n      window.FB.api('/' + facebookGroupId + '/feed',\r\n        'GET',\r\n        { \"fields\": \"from,id,message,updated_time,comments.limit(100).filter(stream){created_time,from,message,id,like_count,comment_count},reactions,full_picture\" }\r\n        , addPosts);\r\n    }\r\n\r\n  });\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      background: \"linear-gradient(45deg, #fafafa 30%, #e3f2fd 90%)\",\r\n    },\r\n    paper: {\r\n      maxWidth: 500,\r\n      margin: `${theme.spacing(1)}px auto`,\r\n      padding: theme.spacing(2)\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    form: {\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n    cftd: {\r\n      backgroundColor: \"#FF4500\",\r\n      height: \"20px\",\r\n      width: \"35px\",\r\n      color: \"#FFFFFF\"\r\n    },\r\n    iconButton: {\r\n      padding: 10\r\n    },\r\n    outerColumn: {\r\n      borderRight: \"1px solid grey\",\r\n      borderBottom: \"1px solid grey\",\r\n      borderLeft: \"1px solid grey\"\r\n    },\r\n    centerColumn: {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\n // adds the respose to the state 'posts' after FB.API call\r\n  const addPosts = (response) => {\r\n    console.log(response);\r\n    /* if the response has no data, just update posts.hasMore to false and return. Thre must be a simpler way, but I am just copying the entire state just to update one node.\r\n    Similar method used few times in this class */  \r\n    if (response.data.length === 0) {\r\n      let postsCopy = Object.assign({}, posts);\r\n      postsCopy.hasMore = false;\r\n      setPosts(postsCopy);\r\n      return;\r\n    }\r\n    const regexCftd = new RegExp(/#CFTD/i);\r\n    const regexTopic = new RegExp(searchTopic, 'i');\r\n    let selectCount = 0;\r\n    let postsCopy = Object.assign({}, posts);\r\n\r\n    response.data.forEach((dta, index, array) => {\r\n\r\n      let cftdPost = regexCftd.test(dta.message);\r\n      let aPost = {\r\n        from: dta.from ? dta.from : { name: \"Unknown\", id: \"9999999999999999\" },\r\n        id: dta.id,\r\n        message: dta.message,\r\n        updated_time: dta.updated_time,\r\n        comments: dta.comments ? dta.comments.data.length : 0,\r\n        reactions: dta.reactions ? dta.reactions.data.length : 0,\r\n        link: \"https://www.facebook.com/groups/cryptics/posts/\" + dta.id.substr(16) + \"/\",\r\n        full_picture: dta.full_picture ? dta.full_picture : \"\",\r\n        cftd: cftdPost,\r\n        // from localStorage\r\n        solve: localStorage.getItem(dta.id) ? JSON.parse(localStorage.getItem(dta.id))\r\n          : { ans: \"\", anno: \"\", solved: false },\r\n      };\r\n      /*  messed up a bit trying to cater for 2 possible scenarios in one function, need clean up at some stage\r\n      1. searchTopic null => select all posts and if cftd, select all comments of cftd post\r\n      2. searchTopic !null  => select posts that matches searchTopic \r\n                          if post doesn't match, check in all comments to the post */\r\n\r\n      if (searchTopic === \"\") {       //scenario 1\r\n        console.log(`Selected ${selectCount++}`);\r\n        postsCopy.data.push(aPost);\r\n\r\n        if (cftdPost && (aPost.comments > 0)) {\r\n          dta.comments.data.forEach(function (dtc, index, array) {\r\n            let cPost = {\r\n              from: dtc.from ? dtc.from : { name: \"Unknown\", id: \"9999999999999999\" },\r\n              id: dtc.id,\r\n              message: dtc.message,\r\n              updated_time: dtc.created_time,\r\n              comments: dtc.comment_count,\r\n                reactions: dtc.like_count,\r\n              link: \"https://www.facebook.com/groups/cryptics/posts/\" + dta.id.substr(16) + \"/\",\r\n              cftd: true,\r\n              solve: localStorage.getItem(dtc.id) ? JSON.parse(localStorage.getItem(dtc.id))\r\n                : { ans: \"\", anno: \"\", solved: false },\r\n            };\r\n            console.log(`Selected ${selectCount++}`);\r\n            postsCopy.data.push(cPost);\r\n          });\r\n        }\r\n      } else {           //scenario 2\r\n        let selectPost = regexTopic.test(aPost.message) || regexTopic.test(aPost.from.name);\r\n        let cftdPost = regexCftd.test(dta.message);\r\n        if (selectPost) {\r\n          console.log(`Selected ${selectCount++}`);\r\n          postsCopy.data.push(aPost);\r\n        } else {\r\n          if (aPost.comments > 0) {\r\n            dta.comments.data.forEach(function (dtc, index, array) {\r\n              let cPost = {\r\n                from: dtc.from ? dtc.from : { name: \"Unknown\", id: \"9999999999999999\" },\r\n                id: dtc.id,\r\n                message: dtc.message,\r\n                updated_time: dtc.created_time,\r\n                comments: dtc.comment_count,\r\n                reactions: dtc.like_count,\r\n                link: \"https://www.facebook.com/groups/cryptics/posts/\" + dta.id.substr(16) + \"/\",\r\n                cftd: cftdPost,\r\n                solve: localStorage.getItem(dtc.id) ? JSON.parse(localStorage.getItem(dtc.id))\r\n                  : { ans: \"\", anno: \"\", solved: false },\r\n              };\r\n              let selectComment = regexTopic.test(cPost.message) || regexTopic.test(cPost.from.name);\r\n              if (selectComment) {\r\n                console.log(`Selected ${selectCount++}`);\r\n                postsCopy.data.push(aPost);\r\n                postsCopy.data.push(cPost);\r\n              }\r\n\r\n            });\r\n          }\r\n\r\n        }\r\n\r\n      };\r\n\r\n    })\r\n\r\n    postsCopy.first = false;\r\n    postsCopy.hasMore = (response.data.length === 0) ? false : true;\r\n    postsCopy.nextPage = response.paging ? response.paging.next.substr(33) : \"\";\r\n    setPosts(postsCopy);\r\n  };\r\n   \r\n\r\n\r\n  const fetchMoreData = () => {\r\n    console.log('in fetchMoreData');\r\n    if (posts.hasMore) {\r\n      window.FB.api(posts.nextPage, addPosts);\r\n      // if (posts.data.length === feedCount) {fetchMoreData()};\r\n    }\r\n  };\r\n\r\n  const handleAnsChange = (idx, key, val) => {\r\n    //console.log(idx +' ' + key + ' ' + val)\r\n    if (!posts.data[idx].solve.solved){\r\n      let postsCopy = Object.assign({}, posts);\r\n      postsCopy.data[idx].solve[key] = val\r\n      // save to localStorage\r\n      const jsonObj = JSON.stringify(postsCopy.data[idx].solve);\r\n      localStorage.setItem(postsCopy.data[idx].id, jsonObj);\r\n      // update state\r\n      setPosts(postsCopy);\r\n    }\r\n  };\r\n\r\n  const handleChangeTopic = (e) => {\r\n    setSearchTopic(e.target.value);\r\n    console.log(searchTopic);\r\n  };\r\n\r\n  const handleRefreshSearch = (e) => {\r\n    setPosts({\r\n      data: [],\r\n      hasMore: true,\r\n      nextPage: \"first\",\r\n      first: true\r\n      });\r\n  }\r\n\r\n  const handlePost = (idx, event) => {\r\n    if (posts.data[idx].solve.ans){\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n  // Group api does not allow posting a comment\r\n  /* -- start group comment\r\n    const cmnt = \"✴ \" + posts.data[idx].solve.ans + \" => \" + posts.data[idx].solve.anno;\r\n    const feedEdge = '/' + process.env.REACT_APP_FACEBOOK_GROUP_ID + '/feed';\r\n    const commentEdge = '/' + posts.data[idx].id + '/comments';\r\n    const commentCommentEdge = '/' + posts.data[idx].id + '/comments';\r\n    window.FB.api(\r\n      commentCommentEdge,\r\n      \"POST\",\r\n      {\r\n          \"message\": cmnt\r\n      },\r\n      function (response) {\r\n        if (response && !response.error) {\r\n          let postsCopy = Object.assign({}, posts);\r\n          postsCopy.data[idx].solve.solved = true;\r\n          // save to localStorage\r\n          const jsonObj = JSON.stringify(postsCopy.data[idx].solve);\r\n          localStorage.setItem(postsCopy.data[idx].id, jsonObj);\r\n          // update state\r\n          setPosts(postsCopy);\r\n        }\r\n        else {\r\n          alert (response.error.message)\r\n        }\r\n      }\r\n    ); -- end group comment */\r\n  \r\n  };\r\n\r\n\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container wrap=\"nowrap\" spacing={1}>\r\n          <Grid item>\r\n            <Avatar src={name.Image}></Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography align=\"left\" variant=\"subtitle2\">Welcome {name.Name}</Typography>\r\n          </Grid>\r\n          <Grid item  >\r\n          <TextField label=\"Search group\"\r\n          id=\"outlined-size-small\"\r\n          defaultValue=\"Search group\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n            value={searchTopic} onChange={handleChangeTopic}  />\r\n           <IconButton  onClick={handleRefreshSearch}>\r\n               <SearchIcon style={{color: \"CornflowerBlue\"}}  />\r\n           </IconButton>\r\n        </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <div>\r\n        <InfiniteScroll\r\n          dataLength={posts.data.length}\r\n          next={fetchMoreData}\r\n          hasMore={posts.hasMore}\r\n          loader={<h4>Loading...</h4>}\r\n          endMessage={\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>You have reached the end</b>\r\n            </p>\r\n          }\r\n        >\r\n          {posts.data.map((dta, index) => (\r\n            <Paper className={classes.paper}>\r\n            <Grid container wrap=\"nowrap\" spacing={2} >\r\n              <Grid item>\r\n                <Avatar>{dta.from.name.split(\" \").map((n,i,a) => i === 0 || i+1 === a.length ? n[0] : null).join(\"\")}\r\n                </Avatar>\r\n              </Grid>\r\n    \r\n              <Grid item xs={12}>\r\n                <Typography align=\"left\">{dta.from.name}</Typography>\r\n                <Typography align=\"left\"\r\n                >\r\n                  <Link href={dta.link} target=\"_blank\" rel=\"noopener noreferrer\" variant=\"body2\">\r\n                    {dta.updated_time}\r\n                  </Link>\r\n                </Typography>\r\n              </Grid>\r\n             \r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"flex-end\"\r\n                justify=\"flex-start\"\r\n              >\r\n                {dta.cftd &&\r\n                <Chip size=\"small\" label=\"CFTD\" style={{background: \"CornflowerBlue\", color:\"White\"}} />\r\n                }\r\n              </Grid>\r\n            </Grid>\r\n    \r\n            <Grid container wrap=\"nowrap\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography align=\"left\">{dta.message}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {dta.full_picture && \r\n            <grid item>\r\n              <img width=\"400\" height=\"300\" alt=\"pic\" src={dta.full_picture} />\r\n            </grid>\r\n\r\n            }\r\n    \r\n            <Grid container wrap=\"nowrap\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography align=\"left\" variant='body2'>likes {dta.reactions}</Typography>\r\n              </Grid>\r\n    \r\n              <Grid item xs>\r\n                <Typography align=\"right\" variant='body2' gutterBottom=\"true\">\r\n                  Comments {dta.comments}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n    \r\n            <Grid container spacing={1} style={{ borderTop: \"1px solid grey\" }}>\r\n              <Grid container direction=\"column\" item xs={1}>\r\n                <Grid\r\n                  item\r\n                  xs\r\n                  \r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <Avatar className={classes.img} src={name.Image}></Avatar>\r\n                </Grid>\r\n              </Grid>\r\n    \r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                item\r\n                xs={9}\r\n              \r\n                alignItems=\"flex-start\"\r\n                justifyContents=\"flex-start\"\r\n              >\r\n                 <Grid item justify=\"left\">\r\n       \r\n                <form className={classes.form} noValidate autoComplete=\"off\">\r\n               <TextField fullWidth\r\n               style={{\r\n                disableUnderline: true,\r\n                background: 'linear-gradient(45deg, #eeeeee 30%, #e0e0e0 90%)',\r\n                borderRadius: \"30px 30px 30px 30px\",\r\n                padding: '0 30px',\r\n                \r\n                \r\n               }}\r\n               InputProps={{\r\n                disableUnderline: true,\r\n               }}\r\n                className={classes.textField}\r\n                 label=\"Answer\"\r\n                 fullwidth\r\n                 multiline\r\n                 maxRows={4}\r\n                 value={posts.data[index].solve.ans}\r\n                 onChange={(e) => handleAnsChange(index, \"ans\" , e.target.value)}\r\n                /> \r\n\r\n                {/*  <TextField\r\n                    className={classes.textField}\r\n                    label=\"Anno\"\r\n                    multiline\r\n                    maxRows={4}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    style={{ marginTop: \"4px\" }}\r\n                    value={posts.data[index].solve.anno}\r\n                    onChange={(e) => handleAnsChange(index, \"anno\" , e.target.value)}\r\n                    \r\n                  /> */}\r\n                  </form>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                item\r\n                xs={1}\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\"\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  {dta.solve.solved ?\r\n                    <IconButton>\r\n                    <DoneIcon style={{color: \"CornflowerBlue\"}} />\r\n                  </IconButton>\r\n                  :\r\n                  <IconButton  onClick={(e) => handlePost(index, e)}>\r\n                    <SendIcon style={{color: \"CornflowerBlue\"}}  />\r\n                  </IconButton> \r\n                  }\r\n                  <Popover\r\n                  id={id}\r\n                  open={open}\r\n                  anchorEl={anchorEl}\r\n                  onClose={handlePopClose}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                  }}\r\n                >\r\n                  <Typography className={classes.typography}>\r\n                    Facebook API doesn't allow posting comments.<br></br>\r\n                    The comment is saved in browser's local storage for reference\r\n                  </Typography>\r\n                </Popover>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            </Paper>\r\n          ))}\r\n        </InfiniteScroll>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React from 'react';  \nimport './App.css';  \nimport Logintbyfacebook from './Loginbyfacebook';  \nimport Dashboard from './Dashboard';  \nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';   \nfunction App() {  \n  return (  \n    <React.Fragment>  \n   <div className=\"App\">    \n     <Router basename=\"/searchccs\">      \n      <div className=\"container\">     \n        <Switch>      \n          <Route exact path='/' component={Logintbyfacebook} />      \n          <Route path='/Dashboard' component={Dashboard} />       \n        </Switch>      \n      </div>      \n    </Router>      \n    </div>    \n    </React.Fragment> \n  );  \n}  \n  \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css'; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}