{"version":3,"sources":["Loginbyfacebook.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Logintbyfacebook","props","state","res","responseFacebook","token","accessToken","Name","name","Image","picture","data","url","groups","ProviderId","localStorage","setItem","JSON","stringify","this","history","push","className","style","buttonStyle","padding","appId","process","autoLoad","version","fields","callback","response","console","log","signup","Component","Dashboard","useState","parse","getItem","React","hasMore","nextPage","first","posts","setPosts","searchTopic","setSearchTopic","selectedGroup","setSelectedGroup","countRef","useRef","anchorEl","setAnchorEl","handlePopClose","open","Boolean","id","undefined","useEffect","current","window","FB","api","addPosts","feed","useStyles","makeStyles","theme","root","flexGrow","overflow","background","paper","maxWidth","margin","spacing","textField","marginLeft","typography","form","cftd","backgroundColor","height","width","color","iconButton","outerColumn","borderRight","borderBottom","borderLeft","centerColumn","formControl","minWidth","selectEmpty","marginTop","length","postsCopy","Object","assign","grp_elem","grp","find","elem","grp_cftd","CFTD","grp_cotm","COTM","regexCftd","RegExp","regexCotm","regexTopic","selectCount","forEach","dta","index","array","cftdPost","test","message","aPost","fromName","from","fromId","updated_time","comments","reactions","link","permalink_url","full_picture","cotm","some","dtc","solve","ans","anno","solved","cPost","created_time","comment_count","like_count","selectPost","firstFound","selectComment","paging","next","substr","document","getElementById","innerHTML","error","fetchMoreData","handleRefreshSearch","e","savePostsAsFile","filename","fileToWrite","blob","Blob","type","createElement","download","href","URL","createObjectURL","dataset","downloadurl","join","evt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","classes","Paper","Grid","container","wrap","item","alt","src","xs","Typography","align","variant","FormControl","NativeSelect","value","onChange","target","inputProps","map","i","substring","FormHelperText","TextField","label","defaultValue","size","Tooltip","title","IconButton","onClick","justifyContent","items","dRow","copyRow","replacer","key","header","keys","csv","row","fieldName","Link","rel","display","gutterBottom","dataLength","loader","endMessage","textAlign","Avatar","split","n","a","direction","alignItems","justify","Chip","borderTop","img","justifyContents","noValidate","autoComplete","fullWidth","disableUnderline","borderRadius","InputProps","fullwidth","multiline","maxRows","idx","val","jsonObj","handleAnsChange","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Button","App","Fragment","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.20479160.chunk.js","sourcesContent":["import React, { Component } from 'react'  \r\nimport FacebookLogin from 'react-facebook-login';  \r\nexport class Logintbyfacebook extends Component {  \r\n        constructor(props) {  \r\n                super(props);  \r\n                this.state = {  \r\n              \r\n                };  \r\n        }  \r\n        \r\n        signup(res) {  \r\n          const responseFacebook = {  \r\n            token: res.accessToken,\r\n            Name: res.name,    \r\n            Image: res.picture.data.url,\r\n            groups: res.groups.data,\r\n            ProviderId: 'Facebook'  \r\n        \r\n          }  \r\n          \r\n          localStorage.setItem(\"userData\", JSON.stringify(responseFacebook));  \r\n          this.props.history.push('/Dashboard')\r\n\r\n        };  \r\n        render() {  \r\n            const facebookAppId = process.env.REACT_APP_FACEBOOK_APP_ID;\r\n            const responseFacebook = (response) => {  \r\n                    console.log(response);  \r\n                 /*    var res = response.profileObj;  \r\n                    console.log(res);  */ \r\n                    debugger;  \r\n                    this.signup(response);  \r\n                  }  \r\n            return (  \r\n                    <div className=\"App\">  \r\n                    {/* <div className=\"row\">  \r\n                      <div className=\"col-sm-12 btn btn-info\">  \r\n                        Login With Facebook Using ReactJS  \r\n                        </div>  \r\n                    </div>   */}\r\n                    <div className=\"row\">  \r\n                      <div style={{ 'paddingTop': \"20px\" }} className=\"col-sm-12\">  \r\n                        <div className=\"col-sm-4\"></div>  \r\n                        <div className=\"col-sm-4\">  \r\n                        <FacebookLogin buttonStyle={{padding:\"6px\"}}  \r\n                          appId={facebookAppId}  \r\n                          autoLoad={true}\r\n                          version=\"10.0\" \r\n                          fields=\"name,picture,groups\"  \r\n                          callback={responseFacebook}/>  \r\n                        </div>  \r\n                        <div className=\"col-sm-4\"></div>  \r\n                      </div>  \r\n                    </div>  \r\n                  </div>  \r\n            )  \r\n        }  \r\n}  \r\n  \r\nexport default Logintbyfacebook","import React, { useEffect, useState, useRef } from 'react'\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  Paper,\r\n  makeStyles,\r\n  Grid,\r\n  Avatar,\r\n  Typography,\r\n  TextField,\r\n  Link,\r\n  Chip,\r\n  IconButton,\r\n  Button,\r\n  Popover,\r\n  Tooltip,\r\n  MenuItem\r\n} from \"@material-ui/core\";\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\n// the main page with most of the logic\r\nfunction Dashboard() {\r\n  const [name, setName] = useState(() => {\r\n    return JSON.parse(localStorage.getItem('userData'));\r\n  });\r\n// 2 state variables\r\n  const [posts, setPosts] = React.useState({\r\n                          data: [],\r\n                          hasMore: true,\r\n                          nextPage: \"first\",\r\n                          first: true\r\n                          });\r\n  const [searchTopic, setSearchTopic] = React.useState(\"\");\r\n  const [selectedGroup, setSelectedGroup] = React.useState(() => {\r\n    return JSON.parse(localStorage.getItem('selectedGroup'));\r\n  });\r\n // useRef is a special state variable but doesn't cause re-render on update \r\n  const countRef = useRef(0);\r\n \r\n  // for popover handle\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  /* const handlePopClick = (event) => {  //see handlPost\r\n    setAnchorEl(event.currentTarget);\r\n  }; */\r\n  const handlePopClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n// end popHanlde\r\n\r\n  useEffect(() => {\r\n    countRef.current++;\r\n    console.log(`in useEffect ${countRef.current}`);\r\n    if (posts.first) {\r\n      // const facebookGroupId = process.env.REACT_APP_FACEBOOK_GROUP_ID;\r\n      window.FB.api('/' + selectedGroup ,\r\n        'GET',\r\n        {\"fields\":\"feed.limit(30){from,id,message,updated_time,permalink_url,comments.limit(10).filter(stream){created_time,from,message,id,like_count,comment_count,permalink_url},reactions,full_picture}\"}\r\n        , (response) => {addPosts(response.feed)});\r\n    }\r\n\r\n  });\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      background: \"linear-gradient(45deg, #fafafa 30%, #e3f2fd 90%)\",\r\n    },\r\n    paper: {\r\n      maxWidth: 500,\r\n      margin: `${theme.spacing(1)}px auto`,\r\n      padding: theme.spacing(1)\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    form: {\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n    cftd: {\r\n      backgroundColor: \"#FF4500\",\r\n      height: \"20px\",\r\n      width: \"35px\",\r\n      color: \"#FFFFFF\"\r\n    },\r\n    iconButton: {\r\n      padding: 10\r\n    },\r\n    outerColumn: {\r\n      borderRight: \"1px solid grey\",\r\n      borderBottom: \"1px solid grey\",\r\n      borderLeft: \"1px solid grey\"\r\n    },\r\n    centerColumn: {\r\n      marginLeft: theme.spacing(1)\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\n // adds the respose to the state 'posts' after FB.API call\r\n  const addPosts = (response) => {\r\n    console.log(response);\r\n    if (!response) {\r\n      document.getElementById(\"mess\").innerHTML += \"Select group where this app is installed\" + '<br></br>';\r\n      return;\r\n    } else if (!response.data) {\r\n      document.getElementById(\"mess\").innerHTML += response.error.message + '<br></br>';\r\n      return;\r\n    }\r\n    /* if the response has no data, just update posts.hasMore to false and return. There must be a simpler way, but I am just copying the entire state just to update one node.\r\n    Similar method used few times in this class */  \r\n    if (response.data.length === 0) {\r\n      let postsCopy = Object.assign({}, posts);\r\n      postsCopy.hasMore = false;\r\n      setPosts(postsCopy);\r\n      return;\r\n    }\r\n    \r\n    const grp_var = JSON.parse(process.env.REACT_APP_FACEBOOK_GRP_TAGS);\r\n    let grp_elem = grp_var.grp.find(elem => elem.id == selectedGroup);\r\n    const grp_cftd = grp_elem ? grp_elem.CFTD || '____' : '____';\r\n    const grp_cotm = grp_elem ? grp_elem.COTM || '____' : '____';\r\n    /* const grp_cftd = 'CFTD';\r\n    const grp_cotm = 'COTM'; */\r\n    const regexCftd = new RegExp(grp_cftd, 'i');\r\n    const regexCotm = new RegExp(grp_cotm, 'i');\r\n    const regexTopic = new RegExp(searchTopic, 'i');\r\n    let selectCount = 0;\r\n    let postsCopy = Object.assign({}, posts);\r\n\r\n    response.data.forEach((dta, index, array) => {\r\n\r\n      let cftdPost = regexCftd.test(dta.message);\r\n      let aPost = {\r\n        fromName: dta.from ? dta.from.name : \"Unknown\",\r\n        fromId: dta.from ? dta.from.id : \"9999999999999999\",\r\n        id: dta.id,\r\n        message: dta.message,\r\n        updated_time: dta.updated_time,\r\n        comments: dta.comments ? dta.comments.data.length : 0,\r\n        reactions: dta.reactions ? dta.reactions.data.length : 0,\r\n        link: dta.permalink_url,\r\n        full_picture: dta.full_picture ? dta.full_picture : \"\",\r\n        cftd: cftdPost,\r\n        cotm: regexCotm.test(dta.message) ||\r\n            (dta.comments ? dta.comments.data.some( dtc => regexCotm.test(dtc.message)) : false),\r\n        feed: true,\r\n        // from localStorage\r\n        solve: localStorage.getItem(dta.id) ? JSON.parse(localStorage.getItem(dta.id))\r\n          : { ans: \"\", anno: \"\", solved: false },\r\n      };\r\n      /*  messed up a bit trying to cater for 2 possible scenarios in one function, need clean up at some stage\r\n      1. searchTopic null => select all posts and if cftd, select all comments of cftd post\r\n      2. searchTopic !null  => select posts that matches searchTopic \r\n                          if post doesn't match, check in all comments to the post */\r\n\r\n      if (searchTopic === \"\") {       //scenario 1\r\n        console.log(`Selected ${selectCount++}`);\r\n        postsCopy.data.push(aPost);\r\n\r\n        if (cftdPost && (aPost.comments > 0)) {\r\n          dta.comments.data.forEach( function(dtc, index, array) {\r\n            let cPost = {\r\n              fromName: dtc.from ? dtc.from.name : \"Unknown\",\r\n              fromId: dtc.from ? dtc.from.id : \"9999999999999999\",\r\n              id: dtc.id,\r\n              message: dtc.message,\r\n              updated_time: dtc.created_time,\r\n              comments: dtc.comment_count,\r\n                reactions: dtc.like_count,\r\n              link: dtc.permalink_url,\r\n              cftd: true,\r\n              cotm: regexCotm.test(dtc.message),\r\n              feed: false,\r\n              solve: localStorage.getItem(dtc.id) ? JSON.parse(localStorage.getItem(dtc.id))\r\n                : { ans: \"\", anno: \"\", solved: false },\r\n            };\r\n            console.log(`Selected ${selectCount++}`);\r\n            postsCopy.data.push(cPost);\r\n          });\r\n        }\r\n      } else {           //scenario 2\r\n        let selectPost = regexTopic.test(aPost.message);\r\n        let cftdPost = regexCftd.test(dta.message);\r\n        if (selectPost) {\r\n          console.log(`Selected ${selectCount++}`);\r\n          postsCopy.data.push(aPost);\r\n        } else {\r\n          if (aPost.comments > 0) {\r\n            let firstFound = false;\r\n            dta.comments.data.forEach(function (dtc, index, array) {   \r\n              let selectComment = regexTopic.test(dtc.message);\r\n              console.log('dtc.mess ' + dtc.message);\r\n              if (selectComment) {\r\n                let cPost = {\r\n                  fromName: dtc.from ? dtc.from.name : \"Unknown\",\r\n                  fromId: dtc.from ? dtc.from.id : \"9999999999999999\",\r\n                  id: dtc.id,\r\n                  message: dtc.message,\r\n                  updated_time: dtc.created_time,\r\n                  comments: dtc.comment_count,\r\n                  reactions: dtc.like_count,\r\n                  link: dtc.permalink_url,\r\n                  cftd: cftdPost,\r\n                  cotm: regexCotm.test(dtc.message),\r\n                  feed: false,\r\n                  solve: localStorage.getItem(dtc.id) ? JSON.parse(localStorage.getItem(dtc.id))\r\n                    : { ans: \"\", anno: \"\", solved: false },\r\n                };\r\n                console.log(`Selected ${selectCount++}`);\r\n                if (!firstFound) {\r\n                  postsCopy.data.push(aPost);\r\n                  firstFound=false;}; \r\n                postsCopy.data.push(cPost);\r\n                // return false;   // break at 1 find\r\n              }\r\n\r\n            });\r\n          }\r\n\r\n        }\r\n\r\n      };\r\n\r\n    })\r\n\r\n    postsCopy.first = false;\r\n    postsCopy.hasMore = (response.data.length === 0) ? false : true;\r\n    postsCopy.nextPage = response.paging ? response.paging.next.substr(33) : \"\";\r\n    setPosts(postsCopy);\r\n  };\r\n   \r\n\r\n\r\n  const fetchMoreData = () => {\r\n    console.log('in fetchMoreData');\r\n    if (posts.hasMore) {\r\n      window.FB.api(posts.nextPage, addPosts);\r\n      // if (posts.data.length === feedCount) {fetchMoreData()};\r\n    }\r\n  };\r\n\r\n  const handleAnsChange = (idx, key, val) => {\r\n    //console.log(idx +' ' + key + ' ' + val)\r\n    if (!posts.data[idx].solve.solved){\r\n      let postsCopy = Object.assign({}, posts);\r\n      postsCopy.data[idx].solve[key] = val\r\n      // save to localStorage\r\n      const jsonObj = JSON.stringify(postsCopy.data[idx].solve);\r\n      localStorage.setItem(postsCopy.data[idx].id, jsonObj);\r\n      // update state\r\n      setPosts(postsCopy);\r\n    }\r\n  };\r\n\r\n  const handleChangeGroup = (e) => {\r\n    setSelectedGroup(e.target.value);\r\n    localStorage.setItem(\"selectedGroup\", e.target.value);\r\n    //initialise state\r\n    handleRefreshSearch(e);\r\n  };\r\n\r\n  const handleChangeTopic = (e) => {\r\n    setSearchTopic(e.target.value);\r\n  };\r\n\r\n  const handleRefreshSearch = (e) => {\r\n    setPosts({\r\n      data: [],\r\n      hasMore: true,\r\n      nextPage: \"first\",\r\n      first: true\r\n      });\r\n  }\r\n\r\n  const handlePost = (idx, event) => {\r\n    if (posts.data[idx].solve.ans){\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n  // Group api does not allow posting a comment\r\n  /* -- start group comment\r\n    const cmnt = \"✴ \" + posts.data[idx].solve.ans + \" => \" + posts.data[idx].solve.anno;\r\n    const feedEdge = '/' + process.env.REACT_APP_FACEBOOK_GROUP_ID + '/feed';\r\n    const commentEdge = '/' + posts.data[idx].id + '/comments';\r\n    const commentCommentEdge = '/' + posts.data[idx].id + '/comments';\r\n    window.FB.api(\r\n      commentCommentEdge,\r\n      \"POST\",\r\n      {\r\n          \"message\": cmnt\r\n      },\r\n      function (response) {\r\n        if (response && !response.error) {\r\n          let postsCopy = Object.assign({}, posts);\r\n          postsCopy.data[idx].solve.solved = true;\r\n          // save to localStorage\r\n          const jsonObj = JSON.stringify(postsCopy.data[idx].solve);\r\n          localStorage.setItem(postsCopy.data[idx].id, jsonObj);\r\n          // update state\r\n          setPosts(postsCopy);\r\n        }\r\n        else {\r\n          alert (response.error.message)\r\n        }\r\n      }\r\n    ); -- end group comment */\r\n  \r\n  };\r\n\r\n  const handleDownload = () => {\r\n    let items = {data:[]};\r\n    posts.data.forEach (function (dRow) {\r\n      let copyRow = {\r\n        fromName: dRow.fromName,\r\n        message: dRow.message,\r\n        updated_time: dRow.updated_time,\r\n        comments: dRow.comments,\r\n        reactions: dRow.reactions,\r\n        link: dRow.link,\r\n        cftd: dRow.cftd,\r\n        cotm: dRow.cotm,\r\n        feed: dRow.feed,\r\n      };\r\n      items.data.push(copyRow);\r\n    });\r\n\r\n    const replacer = (key, value) => value === null ? ' ' : value // specify how you want to handle null values here\r\n    const header = Object.keys(items.data[0])\r\n    const csv = [\r\n        header.join(','), // header row first\r\n        ...items.data.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','))\r\n        ].join('\\r\\n')\r\n\r\n    console.log(csv);\r\n    const fileName = selectedGroup + \".csv\";\r\n    savePostsAsFile(fileName, csv);\r\n\r\n  };\r\n\r\n  const savePostsAsFile = (filename, fileToWrite) => {\r\n    const blob = new Blob([fileToWrite], { type: \"text/plain\" });\r\n    const link = document.createElement(\"a\");\r\n\r\n    link.download = filename;\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.dataset.downloadurl = [\"text/json\", link.download, link.href].join(\":\");\r\n\r\n    const evt = new MouseEvent(\"click\", {\r\n        view: window,\r\n        bubbles: true,\r\n        cancelable: true,\r\n    });\r\n\r\n    link.dispatchEvent(evt);\r\n    link.remove()\r\n};\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n \r\n  \r\n  return (\r\n\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container wrap=\"nowrap\" spacing={1}>\r\n          <Grid item>\r\n            {/* <Avatar src={name.Image}></Avatar> */}\r\n            <img width=\"64\" height=\"64\" alt=\"pic\" src=\"./logo3.125.png\" />\r\n          </Grid>\r\n          \r\n          <Grid item xs>\r\n            <Typography align=\"left\" variant=\"subtitle2\">Welcome {name.Name}</Typography>\r\n          </Grid>\r\n         \r\n        <FormControl className={classes.formControl}>\r\n        <NativeSelect\r\n          className={classes.selectEmpty}\r\n          value={selectedGroup}\r\n          onChange={handleChangeGroup}\r\n          inputProps={{ 'aria-label': 'group' }}\r\n        >\r\n          {name.groups.map((grp, i) => (\r\n            <option\r\n            value={grp.id}>\r\n            {grp.name.substring(0,30)}\r\n          </option>\r\n          ))}\r\n          \r\n        </NativeSelect>\r\n        <FormHelperText>Select Group</FormHelperText>\r\n        </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item container >\r\n        <Grid item >\r\n          <TextField label=\"Search group\"\r\n          id=\"outlined-size-small\"\r\n          defaultValue=\"Search group\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n            value={searchTopic} onChange={handleChangeTopic}  />\r\n           <Tooltip title=\"Search\">\r\n           <IconButton  onClick={handleRefreshSearch}>\r\n               <SearchIcon style={{color: \"CornflowerBlue\"}}  />\r\n           </IconButton>\r\n           </Tooltip>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n\r\n        </Grid>\r\n        <Grid item justifyContent=\"flex-end\" >\r\n        <Tooltip title=\"Download\">\r\n           <IconButton  onClick={handleDownload}>\r\n               <GetAppIcon style={{color: \"CornflowerBlue\"}}  />\r\n           </IconButton>\r\n           </Tooltip>\r\n        </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n        <Link href=\"./Solve_pp.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n            privacy policy\r\n          </Typography>\r\n      </Link>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <div>\r\n        <InfiniteScroll\r\n          dataLength={posts.data.length}\r\n          next={fetchMoreData}\r\n          hasMore={posts.hasMore}\r\n          loader={<h4>Loading...</h4>}\r\n          endMessage={\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>You have reached the end</b>\r\n            </p>\r\n          }\r\n        >\r\n          {posts.data.map((dta, index) => (\r\n            <Paper className={classes.paper}>\r\n            <Grid container wrap=\"nowrap\" spacing={2} >\r\n              \r\n              <Grid item>\r\n                <Avatar>{dta.fromName.split(\" \").map((n,i,a) => i === 0 || i+1 === a.length ? n[0] : null).join(\"\")}\r\n                </Avatar>\r\n              </Grid>\r\n    \r\n              <Grid item xs={12}>\r\n                <Typography align=\"left\">{dta.fromName}</Typography>\r\n                <Typography align=\"left\"\r\n                >\r\n                  <Link href={dta.link} target=\"_blank\" rel=\"noopener noreferrer\" variant=\"body2\">\r\n                    {dta.updated_time}\r\n                  </Link>\r\n                </Typography>\r\n              </Grid>\r\n             \r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"flex-end\"\r\n                justify=\"flex-start\"\r\n              >\r\n                {(dta.cftd && dta.feed) &&\r\n                <Chip size=\"small\" label=\"CFTD\" style={{background: \"CornflowerBlue\", color:\"White\"}} />\r\n                }\r\n                {(dta.cotm && dta.feed) &&\r\n                <Chip size=\"small\" label=\"COTM\" style={{background: \"CornflowerBlue\", color:\"White\"}} />\r\n                }\r\n                 {!dta.feed &&\r\n                <Tooltip title=\"Comment\">\r\n                   <CopyrightIcon color=\"primary\" />\r\n                </Tooltip>\r\n                }\r\n              </Grid>\r\n            </Grid>\r\n    \r\n            <Grid container wrap=\"nowrap\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography align=\"left\">{dta.message}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {dta.full_picture && \r\n            <grid item>\r\n              <img width=\"400\" height=\"300\" alt=\"pic\" src={dta.full_picture} />\r\n            </grid>\r\n\r\n            }\r\n    \r\n            <Grid container wrap=\"nowrap\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography align=\"left\" variant='body2'>likes {dta.reactions}</Typography>\r\n              </Grid>\r\n    \r\n              <Grid item xs>\r\n                <Typography align=\"right\" variant='body2' gutterBottom=\"true\">\r\n                  Comments {dta.comments}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n    \r\n            <Grid container spacing={1} style={{ borderTop: \"1px solid grey\" }}>\r\n              <Grid container direction=\"column\" item xs={1}>\r\n                <Grid\r\n                  item\r\n                  xs\r\n                  \r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <Avatar className={classes.img} src={name.Image}></Avatar>\r\n                </Grid>\r\n              </Grid>\r\n    \r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                item\r\n                xs={9}\r\n              \r\n                alignItems=\"flex-start\"\r\n                justifyContents=\"flex-start\"\r\n              >\r\n                 <Grid item justify=\"left\">\r\n       \r\n                <form className={classes.form} noValidate autoComplete=\"off\">\r\n               <TextField fullWidth\r\n               style={{\r\n                disableUnderline: true,\r\n                background: 'linear-gradient(45deg, #eeeeee 30%, #e0e0e0 90%)',\r\n                borderRadius: \"30px 30px 30px 30px\",\r\n                padding: '0 30px',\r\n                \r\n                \r\n               }}\r\n               InputProps={{\r\n                disableUnderline: true,\r\n               }}\r\n                className={classes.textField}\r\n                 label=\"Answer\"\r\n                 fullwidth\r\n                 multiline\r\n                 maxRows={4}\r\n                 value={posts.data[index].solve.ans}\r\n                 onChange={(e) => handleAnsChange(index, \"ans\" , e.target.value)}\r\n                /> \r\n\r\n                {/*  <TextField\r\n                    className={classes.textField}\r\n                    label=\"Anno\"\r\n                    multiline\r\n                    maxRows={4}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    style={{ marginTop: \"4px\" }}\r\n                    value={posts.data[index].solve.anno}\r\n                    onChange={(e) => handleAnsChange(index, \"anno\" , e.target.value)}\r\n                    \r\n                  /> */}\r\n                  </form>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                item\r\n                xs={1}\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\"\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  {dta.solve.solved ?\r\n                    <IconButton>\r\n                    <DoneIcon style={{color: \"CornflowerBlue\"}} />\r\n                  </IconButton>\r\n                  :\r\n                  <IconButton  onClick={(e) => handlePost(index, e)}>\r\n                    <SendIcon style={{color: \"CornflowerBlue\"}}  />\r\n                  </IconButton> \r\n                  }\r\n                  <Popover\r\n                  id={id}\r\n                  open={open}\r\n                  anchorEl={anchorEl}\r\n                  onClose={handlePopClose}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                  }}\r\n                >\r\n                  <Typography className={classes.typography}>\r\n                    Facebook API doesn't allow posting comments.<br></br>\r\n                    The comment is saved in browser's local storage for reference\r\n                  </Typography>\r\n                </Popover>\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </Grid>\r\n            </Paper>\r\n          ))}\r\n        </InfiniteScroll>\r\n      </div>\r\n\r\n      <div id=\"mess\"></div>\r\n        {posts.hasMore && \r\n            <div>\r\n              <Button variant=\"outlined\" size=\"medium\" color=\"primary\" onClick={fetchMoreData}>\r\n                More\r\n              </Button>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React from 'react';  \nimport './App.css';  \nimport Logintbyfacebook from './Loginbyfacebook';  \nimport Dashboard from './Dashboard';  \nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';   \nfunction App() {  \n  return (  \n    <React.Fragment>  \n   <div className=\"App\">    \n     {/* <Router basename=\"/solve\"> */}\n     <Router basename=\"/solve\">\n      <div className=\"container\">     \n        <Switch>      \n          <Route exact path='/' component={Logintbyfacebook} />      \n          <Route path='/Dashboard' component={Dashboard} />       \n        </Switch>      \n      </div>      \n    </Router>      \n    </div>    \n    </React.Fragment> \n  );  \n}  \n  \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css'; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}